@using System.Drawing;
@using TradingFutures.Client.Abstraction;
@using TradingFutures.Client.Pages.General
@using TradingFutures.Shared.Abstraction;
@using TradingFutures.Shared.Data;
@using TradingFutures.Shared.Entities;

@implements IDisposable

@inject IClientSettingsService ClientSettings
@inject ICacheService ClientCache
@inject ITradingClientService TradingClientService

<div style="overflow-y:auto;height:@HeightStr;">
    <div class="ts-container" style="@ContainerStyleTemplate">
        @{
            var curRow = 1;
            var curColumn = 1;

            var itemStyle = string.Format(ItemStyleTemplate, curColumn, curColumn + 1, curRow, curRow + 1, RowHeight);

            <div class="ts-item" style="@itemStyle">
                <SettingsPage />
            </div>
        }    
    </div>
</div>

@code{
    private string HeightStr => $"{ClientSettings.WindowSize.ClientAreaHeight}px";

    private int ColumnsAmount => 1;

    private int RowsAmount => 1;

    private int RowHeight => ClientSettings.WindowSize.GetRowHeight(RowsAmount);

    private string ContainerStyleTemplate => $"--grid-template-columns:{string.Join(" ", Enumerable.Repeat("1fr", ColumnsAmount))};--grid-template-rows:{string.Join(" ", Enumerable.Repeat("1fr", RowsAmount))};";

    private string ItemStyleTemplate => "--grid-column-start:{0};--grid-column-end:{1};--grid-row-start:{2};--grid-row-end:{3};--height:{4}px";    

    protected override async Task OnInitializedAsync()
    {
        ClientSettings.Updated += clientSettings_Updated;
    }

    public void Dispose()
    {
        ClientSettings.Updated -= clientSettings_Updated;
    }

    private async Task clientSettings_Updated()
    {
        await InvokeAsync(StateHasChanged);
    }
}